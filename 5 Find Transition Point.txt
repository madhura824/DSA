Given a sorted array containing only 0s and 1s, find the transition point, i.e., the first index where 1 was observed, and before that, only 0 was observed.

Example 1:

Input:
N = 5
arr[] = {0,0,0,1,1}
Output: 3
Explanation: index 3 is the transition 
point where 1 begins.

Approach: Use binary search to find the first occurance. Start dividing the array in half if you find one still keep seaching in the left part as you want the first occurance and store the index of previous ocurance.


O(log n) space: o(1)


class Solution
{
public:    
    
    int transitionPoint(int arr[], int n) {
        // code here
        
        int ans=-1;
        int l=0;
        int r=n-1;
        while(l<=r){
            int mid=l+((r-l)/2);
            
            if(arr[mid]==1){
                ans=mid;
                r=mid-1;
            }
            else if(arr[mid]==0){
                l=mid+1;
            }
        }
    
        return ans;
    }
};