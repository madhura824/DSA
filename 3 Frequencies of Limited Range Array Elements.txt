Frequencies of Limited Range Array Elements

Given an array arr[] of N positive integers which can contain integers from 1 to P where elements can be repeated or can be absent from the array. Your task is to count the frequency of all numbers from 1 to N. Make in-place changes in arr[], such that arr[i] = frequency(i). Assume 1-based indexing.
Note: The elements greater than N in the array can be ignored for counting and do modify the array in-place. 

Example 1:

Input:
N = 5
arr[] = {2, 3, 2, 3, 5}
P = 5
Output:
0 2 2 0 1
Explanation: 
Counting frequencies of each array element
We have:
1 occurring 0 times.
2 occurring 2 times.
3 occurring 2 times.
4 occurring 0 times.
5 occurring 1 time.

expected time and space: o(n) and o(1)

Approach: instead of creating a new auxillary array , we will append n zeros to the originaal array, this will make the size of original array 2n = o(n) , thus this means that we are not using any extra significant space.

now simply traverse the array and map the position of the arr[i] with the freq position of it in t he next hallf using the frmula i+(n-1)++arr[i]-1
note this will come in a if condition which will check if it in inside the bounds
and go on simply incrementing the freq

class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        // code here
        for(int i=1;i<=N;i++){
            for(int j=0;j<N;j++){
                if(arr[j]==i){
                    
                }
            }
        }
    }
};