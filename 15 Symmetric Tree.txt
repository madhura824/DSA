Symmetric Tree
Given a Binary Tree. Check whether it is Symmetric or not, i.e. whether the binary tree is a Mirror image of itself or not.

Example 1:

Input:
         5
       /   \
      1     1
     /       \
    2         2
Output: 
True
Explanation: 
Tree is mirror image of itself i.e. tree is symmetric
Example 2:

Input:
         5
       /   \
      10     10
     /  \     \
    20  20     30
Output: 
False


Approach:

for each node we have to check if its subtrees are identical or not,
so if both the root are null then they are identical
if both the roots are not null and their data is same then check for their left and right subtrees
so make a recurssive call for root1->left and root2->right   && root1->right and root2->left

else if one of the root is null or both the roots have different data then return 0

Time Complexity: O(n)
Space Complexity: O(height of the tree)
 

Code:
class Solution{
    public:
    // return true/false denoting whether the tree is Symmetric or not
    
    bool helper(struct Node* root1,struct Node* root2)
    {
        if(root1==NULL  && root2==NULL ){
            return 1;
        }
        else if( root1!=NULL && root2!=NULL && root1->data==root2->data){
            return helper(root1->left,root2->right) && helper(root1->right,root2->left) ;
        }
        else return 0;
    }
    bool isSymmetric(struct Node* root)
    {
	    helper(root,root);
    }
};
