Check if strings are rotations of each other or not


You are given two strings of equal lengths, s1 and s2. The task is to check if s2 is a rotated version of the string s1.

Note: The characters in the strings are in lowercase.

Example 1:

Input:
geeksforgeeks
forgeeksgeeks
Output: 
1
Explanation: s1 is geeksforgeeks, s2 is
forgeeksgeeks. Clearly, s2 is a rotated
version of s1 as s2 can be obtained by
left-rotating s1 by 5 units.

Appraoch 1:  for every letter in the string 1, make a partition, make a new string with the 2 partioned substrings. If the rorated string is same as str2 return 1;

O(nsquare) space O(n)

Appracoh 2: user KMP string pattern matching  algorithm create a newstring 
newstr=str1+str1

so is str1= abcde
then newstr= abcdeabcde  

now for (i=0 to n ){  //O(n)


if(substr(i,n)==str2) return 1;  //O(n)

}
return 0;

time complexity: O(n) space O(n)

Code for Approach 2:


class Solution
{
public:
    //Function to check if two strings are rotations of each other or not.
    bool areRotations(string s1, string s2)
    {
        // Your code here
        string text = s1 + s1;
        if (s1.size() != s2.size())
            return 0;
        int n = s1.size();
        for (int i = 0; i < n; i++)
        {
            string rotated = text.substr(i, n);

            if (rotated == s2)
                return 1;
        }
        return 0;
    }
};