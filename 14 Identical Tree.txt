Identical Tree

Giventwo trees your task is to check is both the trees are identical or not

Given two binary trees, the task is to find if both of them are identical or not.
Note: You need to return true or false, the printing is done by the driver code.

Example 1:

Input:
     1          1
   /   \      /   \
  2     3    2     3
Output: 
Yes
Explanation: 
There are two trees both having 3 nodes and 2 edges, both trees are identical having the root as 1, left child of 1 is 2 and right child of 1 is 3.

Input:
    1       1
  /  \     /  \
 2    3   3    2
Output: 
No
Explanation: There are two trees both having 3 nodes and 2 edges, but both trees are not identical.

Approach: strat traversing both the trees, if both the nodes are either empty or the nodes have same values then call  for its leftsubtree and right subtree recurssively and return true if both subbtrees are identical else return false.


Time Complexity:O(n)

Space Complexity:O(1)

Code:
class Solution
{
    public:
    bool identical(Node *r1, Node *r2){
        if(r1==NULL && r2==NULL) return 1;
        else if(r1!=NULL && r2!=NULL && r1->data == r2->data){
       bool left= identical(r1->left,r2->left );
        bool right=identical(r1->right,r2->right) ;
          return (left && right);  
        }
        else {
            return 0;
        }
    }
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
        //Your Code here
     
            return identical(r1,r2);
      
    }
};

 