Shortest Super Sequence

Given two strings X and Y of lengths m and n respectively, find the length of the smallest string which has both, X and Y as its sub-sequences.
Note: X and Y can have both uppercase and lowercase letters.

Example 1

Input:
X = abcd, Y = xycd
Output: 6
Explanation: Shortest Common Supersequence
would be abxycd which is of length 6 and
has both the strings as its subsequences.
Example 2

Input:
X = efgh, Y = jghi
Output: 6
Explanation: Shortest Common Supersequence
would be ejfghi which is of length 6 and
has both the strings as its subsequences.

Approach:  find the length of the longest common subsequence, with this you get the max possible common subsequence, now to make it a super sequence, we need only those characters which are not in the LCS but in str1 and str2

therefore Shortest Super Sequence = LCS + length(str1) + length(str2) - 2*LCS

Time O(n square)  Space O(n square)

Code:

class Solution
{
    public:
    //Function to find length of shortest common supersequence of two strings.
    int shortestCommonSupersequence(string X, string Y, int m, int n)
    {
        //code here
        
        //appraoch: Find the Longest Commmon Subsequence
        
        //dp approach
        //if length of any of the string is 1 then the length of common  subsequence is 0 
        
        int dp[m+1][n+1];
        memset(dp,0,sizeof(dp));
        
        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(X[i-1]==Y[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                    
                }
                else {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return dp[m][n]+(m-dp[m][n])+(n-dp[m][n]);
    }
};


